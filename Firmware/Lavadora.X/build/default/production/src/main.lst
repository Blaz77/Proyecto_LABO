CCS PCM C Compiler, Version 5.015, 5967               26-nov.-17 22:04

               Filename:   D:\Proyecto_LABO\Firmware\Lavadora.X\build\default\production\src\main.lst

               ROM used:   567 words (28%)
                           Largest free fragment is 1481
               RAM used:   14 (6%) at main() level
                           15 (7%) worst case
               Stack used: 3 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   1A7
0003:  NOP
.................... /*  
....................  * File:   main.c 
....................  * Author: Admin 
....................  * 
....................  * Created on 19 de marzo de 2017, 20:59 
....................  */ 
....................  
.................... #include <main.h> 
.................... /*  
....................  * File:   main.h 
....................  * Author: Admin 
....................  * 
....................  * Created on 19 de marzo de 2017, 20:59 
....................  */ 
....................  
.................... /*#ifndef MAIN_H 
.................... #define MAIN_H*/ 
....................  
.................... #include <16F628A.h> 
.................... //////////// Standard Header file for the PIC16F628A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F628A 
....................  
.................... #list 
....................  
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOPUT                      //Power Up Timer 
.................... #FUSES NOMCLR                   //Master Clear pin used for I/O 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES NOPROTECT                  //Code protected from reads 
....................  
.................... //#use fast_io(a) 
.................... #use fast_io(b) 
.................... #use delay(internal=4000000) 
0004:  MOVLW  29
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   018
000A:  MOVLW  01
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  4A
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  GOTO   016
0016:  DECFSZ 00,F
0017:  GOTO   00A
0018:  RETURN
....................  
.................... #define IN_ON           FALSE 
.................... #define IN_OFF          TRUE 
....................  
.................... #define OUT_ON          FALSE 
.................... #define OUT_OFF         TRUE 
....................  
.................... #define E_RESET_ALARMA  pin_a2 
.................... #define E_NIVEL_MIN     pin_a6 
.................... #define E_NIVEL_MAX     pin_a7 
.................... #define E_BOTON_CICLO   pin_a0 
.................... //#define E_BOTON_CENTRI  pin_a1 
.................... #define PIN_TEMP        pin_a1 
.................... //#define E_PAUSA         pin_a3 
.................... #define PIN_TXD         pin_a3 
.................... #define PIN_RXD         pin_a4 
....................  
.................... #define S_ALARMA        pin_b7 
.................... #define S_CARGA_LAVADO  pin_b6 
.................... #define S_CARGA_ENJUAG  pin_b5 
.................... #define S_GIRO_IZQ      pin_b4 
.................... #define S_GIRO_DER      pin_b3 
.................... #define S_GIRO_CENTRI   pin_b2 
.................... #define S_DESCARGA      pin_b1 
.................... #define S_FIN           pin_b0 
....................  
.................... #define TIEMPO_GIRO     15      //seg 
.................... #define TIEMPO_DESACEL  3       //seg 
.................... #define CARGA_TIMEOUT   7      //minutos 
.................... #define CICLOS_LAVADO   18      //Un ciclo incluye ambos giros y desaceleraciones 
.................... #define CICLOS_ENJUAG   12 
.................... #define CICLOS_DESC_A   6       //Ciclos de descarga maximos previos al nivel minimo 
.................... #define CICLOS_DESC_B   4       //Ciclos de descarga luego del nivel minimo 
.................... #define T_CENTRI_LAVADO 2       //minutos 
.................... #define T_CENTRI_FINAL  4       //minutos 
.................... #define PARADA_CENTRI   10      //segundos 
....................  
....................  
.................... #use rs232(baud=9600,parity=N,xmit=PIN_TXD,rcv=PIN_RXD,bits=8) 
*
0185:  BSF    03.5
0186:  BCF    05.3
0187:  BCF    03.5
0188:  BCF    05.3
0189:  MOVLW  08
018A:  MOVWF  78
018B:  GOTO   18C
018C:  NOP
018D:  BSF    78.7
018E:  GOTO   19D
018F:  BCF    78.7
0190:  RRF    27,F
0191:  BTFSC  03.0
0192:  BSF    05.3
0193:  BTFSS  03.0
0194:  BCF    05.3
0195:  BSF    78.6
0196:  GOTO   19D
0197:  BCF    78.6
0198:  DECFSZ 78,F
0199:  GOTO   190
019A:  GOTO   19B
019B:  NOP
019C:  BSF    05.3
019D:  MOVLW  1C
019E:  MOVWF  04
019F:  DECFSZ 04,F
01A0:  GOTO   19F
01A1:  GOTO   1A2
01A2:  BTFSC  78.7
01A3:  GOTO   18F
01A4:  BTFSC  78.6
01A5:  GOTO   197
01A6:  GOTO   222 (RETURN)
....................  
.................... enum tipoPrograma { 
....................     EN_ESPERA, CICLO_NORMAL, CENTRIFUGADO 
.................... }; 
....................  
.................... enum etapaPrograma { 
....................     CARGA_LAVADO, LAVANDO, DESCARGA_LAVADO, CENTRI_LAVADO, 
....................     CARGA_ENJUAGUE, ENJUAGANDO, DESCARGA_ENJUAGUE, CENTRI_FINAL, 
....................     TERMINADO 
.................... }; 
....................  
.................... enum etapaGiro { 
....................     GIRO_HORARIO, DESACEL_HOR, GIRO_ANTIHOR, DESACEL_ANTIHOR 
.................... }; 
....................  
.................... //#endif  // MAIN_H 
....................  
....................  
.................... // Variables de estado 
....................  short est_resetalarma = IN_OFF; 
....................  short est_nivel_min = IN_OFF; 
....................  short est_nivel_max = IN_OFF; 
....................  short est_boton_ciclo = IN_OFF; 
....................  //short est_boton_centri = IN_OFF; 
....................  //short est_pausa = IN_OFF; 
....................  tipoPrograma programa = EN_ESPERA; 
....................  etapaPrograma etapa = TERMINADO; 
....................  etapaGiro giro = GIRO_ANTIHOR; 
....................  short activar_alarma = FALSE; 
....................  short reset_tiempo = FALSE; 
....................  int segundos = 0, minutos = 0; 
....................  int ciclos_hechos = 0; 
....................  
....................  
.................... void ScanEntradas() 
.................... { 
....................     est_resetalarma = input(E_RESET_ALARMA); 
*
002A:  BSF    03.5
002B:  BSF    05.2
002C:  BCF    03.5
002D:  BCF    20.0
002E:  BTFSC  05.2
002F:  BSF    20.0
....................     est_nivel_min = input(E_NIVEL_MIN); 
0030:  BSF    03.5
0031:  BSF    05.6
0032:  BCF    03.5
0033:  BCF    20.1
0034:  BTFSC  05.6
0035:  BSF    20.1
....................     est_nivel_max = input(E_NIVEL_MAX); 
0036:  BSF    03.5
0037:  BSF    05.7
0038:  BCF    03.5
0039:  BCF    20.2
003A:  BTFSC  05.7
003B:  BSF    20.2
....................     est_boton_ciclo = input(E_BOTON_CICLO); 
003C:  BSF    03.5
003D:  BSF    05.0
003E:  BCF    03.5
003F:  BCF    20.3
0040:  BTFSC  05.0
0041:  BSF    20.3
0042:  GOTO   208 (RETURN)
....................     //est_boton_centri = input(E_BOTON_CENTRI); 
....................     //est_pausa = input(E_PAUSA); 
.................... } 
....................  
.................... void ResetTiempos() 
.................... { 
....................     segundos = 0; 
*
0019:  CLRF   24
....................     minutos = 0; 
001A:  CLRF   25
001B:  RETURN
.................... } 
....................  
.................... void PrepararCentrifugado()  
.................... { 
....................     // Periodo critico, se anula la pausa 
....................     output_bit(S_FIN, OUT_OFF); 
*
0083:  BSF    06.0
....................     output_bit(S_GIRO_DER, OUT_ON); 
0084:  BCF    06.3
....................     for (int i=0; i<TIEMPO_GIRO; i++) { 
0085:  CLRF   27
0086:  MOVF   27,W
0087:  SUBLW  0E
0088:  BTFSS  03.0
0089:  GOTO   093
....................         delay_ms(1000); 
008A:  MOVLW  04
008B:  MOVWF  28
008C:  MOVLW  FA
008D:  MOVWF  29
008E:  CALL   004
008F:  DECFSZ 28,F
0090:  GOTO   08C
0091:  INCF   27,F
0092:  GOTO   086
....................     } 
....................     output_bit(S_GIRO_DER, OUT_OFF); 
0093:  BSF    06.3
....................     delay_ms(800); 
0094:  MOVLW  04
0095:  MOVWF  28
0096:  MOVLW  C8
0097:  MOVWF  29
0098:  CALL   004
0099:  DECFSZ 28,F
009A:  GOTO   096
009B:  RETURN
.................... } 
....................  
.................... void DefinirPrograma() 
.................... { 
....................     if (programa == EN_ESPERA) { 
*
0043:  MOVF   21,F
0044:  BTFSS  03.2
0045:  GOTO   04B
....................         if (est_boton_ciclo == IN_ON) { 
0046:  BTFSC  20.3
0047:  GOTO   04B
....................             programa = CICLO_NORMAL; 
0048:  MOVLW  01
0049:  MOVWF  21
....................             etapa = CARGA_LAVADO; 
004A:  CLRF   22
....................         } 
.................... //        else if (est_boton_centri == IN_ON) { 
.................... //            PrepararCentrifugado(); 
.................... //            programa = CENTRIFUGADO; 
.................... //            etapa = CENTRI_FINAL; 
.................... //        } 
....................     } 
004B:  GOTO   20B (RETURN)
....................      
.................... } 
....................  
.................... void MantenerEspera() 
.................... { 
....................     output_bit(S_FIN, OUT_ON); 
004C:  BCF    06.0
004D:  GOTO   20F (RETURN)
.................... } 
....................  
.................... void EjecutarGiros() 
.................... { 
....................     if (giro == GIRO_ANTIHOR) { 
004E:  MOVF   23,W
004F:  SUBLW  02
0050:  BTFSS  03.2
0051:  GOTO   05C
....................         if (segundos >= TIEMPO_GIRO) { 
0052:  MOVF   24,W
0053:  SUBLW  0E
0054:  BTFSC  03.0
0055:  GOTO   05A
....................             giro = DESACEL_ANTIHOR; 
0056:  MOVLW  03
0057:  MOVWF  23
....................             ResetTiempos(); 
0058:  CALL   019
....................         } 
0059:  GOTO   05B
....................         else { 
....................             output_bit(S_GIRO_IZQ, OUT_ON); 
005A:  BCF    06.4
....................         } 
....................     } 
005B:  GOTO   082
....................     else if (giro == DESACEL_ANTIHOR) { 
005C:  MOVF   23,W
005D:  SUBLW  03
005E:  BTFSS  03.2
005F:  GOTO   069
....................         if (segundos >= TIEMPO_DESACEL) { 
0060:  MOVF   24,W
0061:  SUBLW  02
0062:  BTFSC  03.0
0063:  GOTO   067
....................             giro = GIRO_HORARIO; 
0064:  CLRF   23
....................             ResetTiempos(); 
0065:  CALL   019
....................         } 
0066:  GOTO   068
....................         else { 
....................             output_bit(S_GIRO_IZQ, OUT_OFF); 
0067:  BSF    06.4
....................         } 
....................     } 
0068:  GOTO   082
....................     else if (giro == GIRO_HORARIO) { 
0069:  MOVF   23,F
006A:  BTFSS  03.2
006B:  GOTO   076
....................         if (segundos >= TIEMPO_GIRO) { 
006C:  MOVF   24,W
006D:  SUBLW  0E
006E:  BTFSC  03.0
006F:  GOTO   074
....................             giro = DESACEL_HOR; 
0070:  MOVLW  01
0071:  MOVWF  23
....................             ResetTiempos(); 
0072:  CALL   019
....................         } 
0073:  GOTO   075
....................         else { 
....................             output_bit(S_GIRO_DER, OUT_ON); 
0074:  BCF    06.3
....................         } 
....................     } 
0075:  GOTO   082
....................     else if (giro == DESACEL_HOR) { 
0076:  DECFSZ 23,W
0077:  GOTO   082
....................         if (segundos >= TIEMPO_DESACEL) { 
0078:  MOVF   24,W
0079:  SUBLW  02
007A:  BTFSC  03.0
007B:  GOTO   081
....................             giro = GIRO_ANTIHOR; 
007C:  MOVLW  02
007D:  MOVWF  23
....................             ResetTiempos(); 
007E:  CALL   019
....................             ciclos_hechos++; 
007F:  INCF   26,F
....................         } 
0080:  GOTO   082
....................         else { 
....................             output_bit(S_GIRO_DER, OUT_OFF); 
0081:  BSF    06.3
....................         } 
....................     } 
0082:  RETURN
.................... } 
....................  
.................... void EjecutarCicloNormal() 
.................... { 
....................     if (etapa == CARGA_LAVADO) { 
*
009C:  MOVF   22,F
009D:  BTFSS  03.2
009E:  GOTO   0B5
....................         output_bit(S_FIN, OUT_OFF); 
009F:  BSF    06.0
....................         output_bit(S_DESCARGA, OUT_ON); //La valvula descarga en OFF 
00A0:  BCF    06.1
....................         if (est_nivel_max == IN_ON) { 
00A1:  BTFSC  20.2
00A2:  GOTO   0AA
....................             output_bit(S_CARGA_LAVADO, OUT_OFF); 
00A3:  BSF    06.6
....................             etapa = LAVANDO; 
00A4:  MOVLW  01
00A5:  MOVWF  22
....................             giro = GIRO_ANTIHOR; 
00A6:  MOVLW  02
00A7:  MOVWF  23
....................             reset_tiempo = TRUE; 
00A8:  BSF    20.5
....................         } 
00A9:  GOTO   0B4
....................         else { 
....................             if (minutos >= CARGA_TIMEOUT) { 
00AA:  MOVF   25,W
00AB:  SUBLW  06
00AC:  BTFSC  03.0
00AD:  GOTO   0B1
....................                 output_bit(S_CARGA_LAVADO, OUT_OFF); 
00AE:  BSF    06.6
....................                 activar_alarma = TRUE; 
00AF:  BSF    20.4
....................             } 
00B0:  GOTO   0B4
....................             else if (segundos > 0) { 
00B1:  MOVF   24,F
00B2:  BTFSS  03.2
....................                 output_bit(S_CARGA_LAVADO, OUT_ON); 
00B3:  BCF    06.6
....................             } 
....................         } 
....................     } 
00B4:  GOTO   172
....................     else if (etapa == LAVANDO) { 
00B5:  DECFSZ 22,W
00B6:  GOTO   0C6
....................         if (est_nivel_max == IN_ON)  
00B7:  BTFSC  20.2
00B8:  GOTO   0BB
....................             output_bit(S_CARGA_LAVADO, OUT_OFF); 
00B9:  BSF    06.6
00BA:  GOTO   0BC
....................         else 
....................             output_bit(S_CARGA_LAVADO, OUT_ON); 
00BB:  BCF    06.6
....................         EjecutarGiros(); 
00BC:  CALL   04E
....................         if (ciclos_hechos >= CICLOS_LAVADO) { 
00BD:  MOVF   26,W
00BE:  SUBLW  11
00BF:  BTFSC  03.0
00C0:  GOTO   0C5
....................             ciclos_hechos = 0; 
00C1:  CLRF   26
....................             output_bit(S_CARGA_LAVADO, OUT_OFF); 
00C2:  BSF    06.6
....................             etapa = DESCARGA_LAVADO; 
00C3:  MOVLW  02
00C4:  MOVWF  22
....................         } 
....................     } 
00C5:  GOTO   172
....................     else if (etapa == DESCARGA_LAVADO) { 
00C6:  MOVF   22,W
00C7:  SUBLW  02
00C8:  BTFSS  03.2
00C9:  GOTO   0EB
....................         if (segundos > 0)  
00CA:  MOVF   24,F
00CB:  BTFSS  03.2
....................             output_bit(S_DESCARGA, OUT_OFF);    //La valvula descarga en OFF 
00CC:  BSF    06.1
....................         EjecutarGiros(); 
00CD:  CALL   04E
....................         if (ciclos_hechos < CICLOS_DESC_A && est_nivel_min == IN_OFF) { 
00CE:  MOVF   26,W
00CF:  SUBLW  05
00D0:  BTFSS  03.0
00D1:  GOTO   0D7
00D2:  BTFSS  20.1
00D3:  GOTO   0D7
....................             ciclos_hechos = CICLOS_DESC_A; 
00D4:  MOVLW  06
00D5:  MOVWF  26
....................         } 
00D6:  GOTO   0EA
....................         else if (ciclos_hechos == CICLOS_DESC_A && est_nivel_min == IN_ON) { 
00D7:  MOVF   26,W
00D8:  SUBLW  06
00D9:  BTFSS  03.2
00DA:  GOTO   0E0
00DB:  BTFSC  20.1
00DC:  GOTO   0E0
....................             ciclos_hechos = 0; 
00DD:  CLRF   26
....................             activar_alarma = TRUE; 
00DE:  BSF    20.4
....................         } 
00DF:  GOTO   0EA
....................         else if (ciclos_hechos >= CICLOS_DESC_A + CICLOS_DESC_B) { 
00E0:  MOVF   26,W
00E1:  SUBLW  09
00E2:  BTFSC  03.0
00E3:  GOTO   0EA
....................             ciclos_hechos = 0; 
00E4:  CLRF   26
....................             ResetTiempos(); 
00E5:  CALL   019
....................             PrepararCentrifugado(); 
00E6:  CALL   083
....................             output_bit(S_GIRO_CENTRI, OUT_ON); 
00E7:  BCF    06.2
....................             etapa = CENTRI_LAVADO; 
00E8:  MOVLW  03
00E9:  MOVWF  22
....................         } 
....................     } 
00EA:  GOTO   172
....................     else if (etapa == CENTRI_LAVADO) { 
00EB:  MOVF   22,W
00EC:  SUBLW  03
00ED:  BTFSS  03.2
00EE:  GOTO   109
....................         output_bit(S_GIRO_CENTRI, OUT_ON); 
00EF:  BCF    06.2
....................         if (minutos >= T_CENTRI_LAVADO) { 
00F0:  MOVF   25,W
00F1:  SUBLW  01
00F2:  BTFSC  03.0
00F3:  GOTO   108
....................             output_bit(S_GIRO_CENTRI, OUT_OFF); 
00F4:  BSF    06.2
....................             ResetTiempos(); 
00F5:  CALL   019
....................             etapa = CARGA_ENJUAGUE; 
00F6:  MOVLW  04
00F7:  MOVWF  22
....................             // Carga prematura mientras se detiene 
....................             output_bit(S_CARGA_ENJUAG, OUT_ON); 
00F8:  BCF    06.5
....................             delay_ms(PARADA_CENTRI * 300); 
00F9:  MOVLW  0C
00FA:  MOVWF  27
00FB:  MOVLW  FA
00FC:  MOVWF  29
00FD:  CALL   004
00FE:  DECFSZ 27,F
00FF:  GOTO   0FB
....................             output_bit(S_DESCARGA, OUT_ON); //La valvula descarga en OFF 
0100:  BCF    06.1
....................             delay_ms(PARADA_CENTRI * 700); 
0101:  MOVLW  1C
0102:  MOVWF  27
0103:  MOVLW  FA
0104:  MOVWF  29
0105:  CALL   004
0106:  DECFSZ 27,F
0107:  GOTO   103
....................         } 
....................     } 
0108:  GOTO   172
....................     else if (etapa == CARGA_ENJUAGUE) { 
0109:  MOVF   22,W
010A:  SUBLW  04
010B:  BTFSS  03.2
010C:  GOTO   126
....................         output_bit(S_DESCARGA, OUT_ON); //La valvula descarga en OFF 
010D:  BCF    06.1
....................         if (est_nivel_max == IN_ON) { 
010E:  BTFSC  20.2
010F:  GOTO   118
....................             output_bit(S_CARGA_ENJUAG, OUT_OFF); 
0110:  BSF    06.5
....................             output_bit(S_CARGA_LAVADO, OUT_OFF); 
0111:  BSF    06.6
....................             etapa = ENJUAGANDO; 
0112:  MOVLW  05
0113:  MOVWF  22
....................             giro = GIRO_ANTIHOR; 
0114:  MOVLW  02
0115:  MOVWF  23
....................             reset_tiempo = TRUE; 
0116:  BSF    20.5
....................         } 
0117:  GOTO   125
....................         else { 
....................             if (minutos >= CARGA_TIMEOUT) { 
0118:  MOVF   25,W
0119:  SUBLW  06
011A:  BTFSC  03.0
011B:  GOTO   120
....................                 output_bit(S_CARGA_ENJUAG, OUT_OFF); 
011C:  BSF    06.5
....................                 output_bit(S_CARGA_LAVADO, OUT_OFF); 
011D:  BSF    06.6
....................                 activar_alarma = TRUE; 
011E:  BSF    20.4
....................             } 
011F:  GOTO   125
....................             else if (segundos > 0) { 
0120:  MOVF   24,F
0121:  BTFSC  03.2
0122:  GOTO   125
....................                 output_bit(S_CARGA_ENJUAG, OUT_ON); 
0123:  BCF    06.5
....................                 output_bit(S_CARGA_LAVADO, OUT_ON); 
0124:  BCF    06.6
....................             } 
....................         } 
....................     } 
0125:  GOTO   172
....................     else if (etapa == ENJUAGANDO) { 
0126:  MOVF   22,W
0127:  SUBLW  05
0128:  BTFSS  03.2
0129:  GOTO   13A
....................         if (est_nivel_max == IN_ON)  
012A:  BTFSC  20.2
012B:  GOTO   12E
....................             output_bit(S_CARGA_ENJUAG, OUT_OFF); 
012C:  BSF    06.5
012D:  GOTO   12F
....................         else 
....................             output_bit(S_CARGA_ENJUAG, OUT_ON); 
012E:  BCF    06.5
....................         EjecutarGiros(); 
012F:  CALL   04E
....................         if (ciclos_hechos >= CICLOS_ENJUAG) { 
0130:  MOVF   26,W
0131:  SUBLW  0B
0132:  BTFSC  03.0
0133:  GOTO   139
....................             ciclos_hechos = 0; 
0134:  CLRF   26
....................             output_bit(S_CARGA_ENJUAG, OUT_OFF); 
0135:  BSF    06.5
....................             output_bit(S_DESCARGA, OUT_OFF);    //La valvula descarga en OFF 
0136:  BSF    06.1
....................             etapa = DESCARGA_ENJUAGUE; 
0137:  MOVLW  06
0138:  MOVWF  22
....................         } 
....................     } 
0139:  GOTO   172
....................     else if (etapa == DESCARGA_ENJUAGUE) { 
013A:  MOVF   22,W
013B:  SUBLW  06
013C:  BTFSS  03.2
013D:  GOTO   15D
....................         output_bit(S_DESCARGA, OUT_OFF);    //La valvula descarga en OFF 
013E:  BSF    06.1
....................         EjecutarGiros(); 
013F:  CALL   04E
....................         if (ciclos_hechos < CICLOS_DESC_A && est_nivel_min == IN_OFF) { 
0140:  MOVF   26,W
0141:  SUBLW  05
0142:  BTFSS  03.0
0143:  GOTO   149
0144:  BTFSS  20.1
0145:  GOTO   149
....................             ciclos_hechos = CICLOS_DESC_A; 
0146:  MOVLW  06
0147:  MOVWF  26
....................         } 
0148:  GOTO   15C
....................         else if (ciclos_hechos == CICLOS_DESC_A && est_nivel_min == IN_ON) { 
0149:  MOVF   26,W
014A:  SUBLW  06
014B:  BTFSS  03.2
014C:  GOTO   152
014D:  BTFSC  20.1
014E:  GOTO   152
....................             ciclos_hechos = 0; 
014F:  CLRF   26
....................             activar_alarma = TRUE; 
0150:  BSF    20.4
....................         } 
0151:  GOTO   15C
....................         else if (ciclos_hechos >= CICLOS_DESC_A + CICLOS_DESC_B) { 
0152:  MOVF   26,W
0153:  SUBLW  09
0154:  BTFSC  03.0
0155:  GOTO   15C
....................             ciclos_hechos = 0; 
0156:  CLRF   26
....................             ResetTiempos(); 
0157:  CALL   019
....................             PrepararCentrifugado(); 
0158:  CALL   083
....................             output_bit(S_GIRO_CENTRI, OUT_ON); 
0159:  BCF    06.2
....................             etapa = CENTRI_FINAL; 
015A:  MOVLW  07
015B:  MOVWF  22
....................         } 
....................     } 
015C:  GOTO   172
....................     else if (etapa == CENTRI_FINAL) { 
015D:  MOVF   22,W
015E:  SUBLW  07
015F:  BTFSS  03.2
0160:  GOTO   172
....................         output_bit(S_GIRO_CENTRI, OUT_ON); 
0161:  BCF    06.2
....................         if (minutos >= T_CENTRI_FINAL) { 
0162:  MOVF   25,W
0163:  SUBLW  03
0164:  BTFSC  03.0
0165:  GOTO   172
....................             output_bit(S_GIRO_CENTRI, OUT_OFF); 
0166:  BSF    06.2
....................             reset_tiempo = TRUE; 
0167:  BSF    20.5
....................             delay_ms(PARADA_CENTRI * 1000); 
0168:  MOVLW  28
0169:  MOVWF  27
016A:  MOVLW  FA
016B:  MOVWF  29
016C:  CALL   004
016D:  DECFSZ 27,F
016E:  GOTO   16A
....................             etapa = TERMINADO; 
016F:  MOVLW  08
0170:  MOVWF  22
....................             programa = EN_ESPERA; 
0171:  CLRF   21
....................         } 
....................     } 
0172:  GOTO   213 (RETURN)
.................... } 
....................  
.................... void EjecutarCentrifugado() 
.................... { 
....................     output_bit(S_GIRO_CENTRI, OUT_ON); 
0173:  BCF    06.2
....................     if (minutos >= T_CENTRI_FINAL) { 
0174:  MOVF   25,W
0175:  SUBLW  03
0176:  BTFSC  03.0
0177:  GOTO   184
....................         output_bit(S_GIRO_CENTRI, OUT_OFF); 
0178:  BSF    06.2
....................         reset_tiempo = TRUE; 
0179:  BSF    20.5
....................         delay_ms(PARADA_CENTRI * 1000); 
017A:  MOVLW  28
017B:  MOVWF  27
017C:  MOVLW  FA
017D:  MOVWF  29
017E:  CALL   004
017F:  DECFSZ 27,F
0180:  GOTO   17C
....................         etapa = TERMINADO; 
0181:  MOVLW  08
0182:  MOVWF  22
....................         programa = EN_ESPERA; 
0183:  CLRF   21
....................     } 
0184:  GOTO   218 (RETURN)
.................... } 
....................  
.................... void GenerarAlarma() 
.................... { 
....................     /* Causantes de alarma: 
....................      * - Al iniciar se detecta agua 
....................      * - Se excedio el tiempo limite de carga de agua  
....................      * - Se excedio el tiempo limite de descarga  
....................      */ 
....................     output_bit(S_ALARMA, OUT_ON); 
*
001C:  BCF    06.7
....................     ResetTiempos(); 
001D:  CALL   019
....................     while (input(E_RESET_ALARMA) != IN_ON) { 
001E:  BSF    03.5
001F:  BSF    05.2
0020:  BCF    03.5
0021:  BTFSS  05.2
0022:  GOTO   027
....................         delay_ms(150); 
0023:  MOVLW  96
0024:  MOVWF  29
0025:  CALL   004
0026:  GOTO   01E
....................     } 
....................     activar_alarma = FALSE; 
0027:  BCF    20.4
....................     output_bit(S_ALARMA, OUT_OFF); 
0028:  BSF    06.7
0029:  RETURN
.................... } 
....................  
.................... //void PausarCiclo() 
.................... //{ 
.................... //    output_bit(S_CARGA_LAVADO, OUT_OFF); 
.................... //    output_bit(S_CARGA_ENJUAG, OUT_OFF); 
.................... //    output_bit(S_GIRO_IZQ, OUT_OFF); 
.................... //    output_bit(S_GIRO_DER, OUT_OFF); 
.................... //    output_bit(S_GIRO_CENTRI, OUT_OFF); 
.................... //     
.................... //    for (int i=0; i<3; i++) { 
.................... //        output_bit(S_ALARMA, OUT_ON); 
.................... //        delay_ms(800); 
.................... //        output_bit(S_ALARMA, OUT_OFF); 
.................... //        delay_ms(800); 
.................... //    } 
.................... //    while (input(E_PAUSA) != IN_OFF) { 
.................... //        delay_ms(200); 
.................... //    } 
.................... //    while (input(E_PAUSA) != IN_ON) { 
.................... //        delay_ms(200); 
.................... //    } 
.................... //    while (input(E_PAUSA) != IN_OFF) { 
.................... //        delay_ms(200); 
.................... //    } 
.................... //    if (etapa == CENTRI_LAVADO || etapa == CENTRI_FINAL) { 
.................... //        PrepararCentrifugado(); 
.................... //    } 
.................... //} 
....................  
.................... void main() 
*
01A7:  MOVF   03,W
01A8:  ANDLW  1F
01A9:  MOVWF  03
01AA:  BSF    03.5
01AB:  BSF    0E.3
01AC:  BCF    05.3
01AD:  BCF    03.5
01AE:  BSF    05.3
01AF:  BSF    20.0
01B0:  BSF    20.1
01B1:  BSF    20.2
01B2:  BSF    20.3
01B3:  CLRF   21
01B4:  MOVLW  08
01B5:  MOVWF  22
01B6:  MOVLW  02
01B7:  MOVWF  23
01B8:  BCF    20.4
01B9:  BCF    20.5
01BA:  CLRF   24
01BB:  CLRF   25
01BC:  CLRF   26
01BD:  MOVLW  07
01BE:  MOVWF  1F
01BF:  BCF    03.7
.................... { 
....................     setup_timer_0(RTCC_INTERNAL|RTCC_DIV_1); 
01C0:  BSF    03.5
01C1:  MOVF   01,W
01C2:  ANDLW  C7
01C3:  IORLW  08
01C4:  MOVWF  01
.................... 	setup_timer_1(T1_DISABLED); 
01C5:  BCF    03.5
01C6:  CLRF   10
.................... 	setup_timer_2(T2_DISABLED,0,1); 
01C7:  MOVLW  00
01C8:  MOVWF  78
01C9:  MOVWF  12
01CA:  MOVLW  00
01CB:  BSF    03.5
01CC:  MOVWF  12
.................... 	setup_comparator(NC_NC_NC_NC); 
01CD:  MOVLW  07
01CE:  BCF    03.5
01CF:  MOVWF  1F
01D0:  BSF    03.5
01D1:  MOVF   05,W
01D2:  MOVWF  05
01D3:  MOVLW  02
01D4:  MOVWF  77
01D5:  DECFSZ 77,F
01D6:  GOTO   1D5
01D7:  GOTO   1D8
01D8:  NOP
01D9:  BCF    03.5
01DA:  MOVF   1F,W
01DB:  BCF    0C.6
.................... 	setup_vref(FALSE); 
01DC:  BSF    03.5
01DD:  CLRF   1F
....................      
....................     set_tris_a(0b11110111); 
01DE:  MOVLW  F7
01DF:  MOVWF  05
.................... 	set_tris_b(0b00000000); 
01E0:  MOVLW  00
01E1:  MOVWF  06
....................      
....................     output_low(PIN_TXD); 
01E2:  BCF    05.3
01E3:  BCF    03.5
01E4:  BCF    05.3
....................     //output_a(0x00); 
.................... 	output_b(0b11111111); 
01E5:  MOVLW  FF
01E6:  MOVWF  06
....................      
.................... 	disable_interrupts(INT_EXT); 
01E7:  BCF    0B.4
.................... 	disable_interrupts(GLOBAL);   
01E8:  BCF    0B.6
01E9:  BCF    0B.7
01EA:  BTFSC  0B.7
01EB:  GOTO   1E9
....................      
....................     delay_ms(400); 
01EC:  MOVLW  02
01ED:  MOVWF  27
01EE:  MOVLW  C8
01EF:  MOVWF  29
01F0:  CALL   004
01F1:  DECFSZ 27,F
01F2:  GOTO   1EE
....................      
....................     while (input(E_NIVEL_MAX) == IN_ON || input(E_NIVEL_MIN) == IN_ON) 
01F3:  BSF    03.5
01F4:  BSF    05.7
01F5:  BCF    03.5
01F6:  BTFSS  05.7
01F7:  GOTO   1FD
01F8:  BSF    03.5
01F9:  BSF    05.6
01FA:  BCF    03.5
01FB:  BTFSC  05.6
01FC:  GOTO   1FF
....................         GenerarAlarma(); 
01FD:  CALL   01C
01FE:  GOTO   1F3
....................      
....................     delay_ms(500); 
01FF:  MOVLW  02
0200:  MOVWF  27
0201:  MOVLW  FA
0202:  MOVWF  29
0203:  CALL   004
0204:  DECFSZ 27,F
0205:  GOTO   201
....................     output_bit(S_FIN, OUT_ON); 
0206:  BCF    06.0
....................     while(TRUE) 
....................     { 
....................          
....................         ScanEntradas(); 
0207:  GOTO   02A
....................         if (activar_alarma) 
0208:  BTFSC  20.4
....................             GenerarAlarma(); 
0209:  CALL   01C
.................... //        if (est_pausa == IN_ON && programa != EN_ESPERA) 
.................... //            PausarCiclo(); 
....................         DefinirPrograma(); 
020A:  GOTO   043
....................         if (programa == EN_ESPERA) { 
020B:  MOVF   21,F
020C:  BTFSS  03.2
020D:  GOTO   210
....................             MantenerEspera(); 
020E:  GOTO   04C
....................         } 
020F:  GOTO   218
....................         else if (programa == CICLO_NORMAL) { 
0210:  DECFSZ 21,W
0211:  GOTO   214
....................             EjecutarCicloNormal(); 
0212:  GOTO   09C
....................         } 
0213:  GOTO   218
....................         else if (programa == CENTRIFUGADO) { 
0214:  MOVF   21,W
0215:  SUBLW  02
0216:  BTFSC  03.2
....................             EjecutarCentrifugado(); 
0217:  GOTO   173
....................         } 
....................         if (programa == EN_ESPERA) { 
0218:  MOVF   21,F
0219:  BTFSS  03.2
021A:  GOTO   21F
....................             delay_ms(150); 
021B:  MOVLW  96
021C:  MOVWF  29
021D:  CALL   004
....................         } 
021E:  GOTO   235
....................         else { 
....................             putc('A'); 
021F:  MOVLW  41
0220:  MOVWF  27
0221:  GOTO   185
....................             delay_ms(999); 
0222:  MOVLW  09
0223:  MOVWF  27
0224:  MOVLW  6F
0225:  MOVWF  29
0226:  CALL   004
0227:  DECFSZ 27,F
0228:  GOTO   224
....................             if (reset_tiempo) { 
0229:  BTFSS  20.5
022A:  GOTO   22E
....................                 ResetTiempos(); 
022B:  CALL   019
....................                 reset_tiempo = FALSE; 
022C:  BCF    20.5
....................             } 
022D:  GOTO   235
....................             else { 
....................                 segundos++; 
022E:  INCF   24,F
....................                 if (segundos == 60) { 
022F:  MOVF   24,W
0230:  SUBLW  3C
0231:  BTFSS  03.2
0232:  GOTO   235
....................                     minutos++; 
0233:  INCF   25,F
....................                     segundos = 0; 
0234:  CLRF   24
....................                 } 
....................             } 
....................         } 
0235:  GOTO   207
....................     } 
....................      
.................... } 
....................  
0236:  SLEEP

Configuration Fuses:
   Word  1: 3F18   NOWDT NOPUT INTRC_IO NOMCLR NOBROWNOUT NOLVP NOCPD NOPROTECT
